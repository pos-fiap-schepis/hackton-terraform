name: Deploy Applications with Helm

on:
  workflow_dispatch:  # Manual trigger

jobs:
  wait-for-infra:
    name: Wait for Terraform Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Wait for Terraform Workflow Completion
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Terraform AWS Deployment"
          repo: ${{ github.repository }}
          ref: main
          waitIntervalSeconds: 60

  deploy:
    name: Deploy Helm Applications
    runs-on: ubuntu-latest
    needs: wait-for-infra  # Ensure Terraform completes first

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET }}
          aws configure set region us-east-1

      - name: Retrieve RDS Endpoint
        id: rds_endpoint
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier hackaton-database --query "DBInstances[0].Endpoint.Address" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Set up Kubernetes
        run: |
          aws eks update-kubeconfig --region us-east-1 --name infra-cluster
          kubectl cluster-info  # Verify connection

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0  # Change to latest version if needed

      - name: Deploy MinIO
        run: |
          helm repo add minio https://charts.min.io/
          helm repo update
          helm upgrade --install minio minio/minio \
            --namespace minio --create-namespace \
            --set accessKey=myaccesskey \
            --set secretKey=mysecretkey \
            --set service.type=LoadBalancer

      - name: Deploy RabbitMQ
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install rabbitmq bitnami/rabbitmq \
            --namespace rabbitmq --create-namespace \
            --set auth.username=guest \
            --set auth.password=guest \
            --set persistence.enabled=false \
            --set service.type=LoadBalancer

      - name: Deploy SonarQube
        run: |
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo update
          helm upgrade --install sonarqube sonarqube/sonarqube \
            --namespace sonarqube --create-namespace \
            --set postgresql.enabled=false \
            --set externalDatabase.host=$RDS_ENDPOINT \
            --set externalDatabase.user=${{ secrets.RDS_USERNAME }} \
            --set externalDatabase.password=${{ secrets.RDS_PASSWORD }} \
            --set externalDatabase.database=sonarqube \
            --set externalDatabase.port=5432 \
            --set service.type=LoadBalancer

      - name: Deploy Keycloak
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install keycloak bitnami/keycloak \
            --namespace keycloak --create-namespace \
            --set "extraEnvVars[0].name=KC_FEATURES" \
            --set "extraEnvVars[0].value=scripts" \
            --set auth.adminUser=admin \
            --set auth.adminPassword=adminpassword \
            --set postgresql.enabled=false \
            --set externalDatabase.host=$RDS_ENDPOINT \
            --set externalDatabase.user=${{ secrets.RDS_USERNAME }} \
            --set externalDatabase.password=${{ secrets.RDS_PASSWORD }} \
            --set externalDatabase.database=keycloak \
            --set externalDatabase.port=5432 \
            --set service.type=LoadBalancer

      - name: Deploy Spring Cloud Config Server
        run: |
          helm upgrade --install spring-config ./helm-charts/spring-config \
            --namespace spring-config --create-namespace \
            --set service.type=LoadBalancer

      - name: Verify Deployments
        run: |
          kubectl get pods --all-namespaces
          kubectl get services --all-namespaces
