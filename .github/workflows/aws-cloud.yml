name: Terraform AWS Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: 'us-east-1'
      TF_VAR_region: 'us-east-1'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Change to AWS Cloud Directory
        run: |
          cd clouds/aws

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Create Bucket S3
        run: |
          BUCKET_NAME="pos-fiap-schepis-$(date +'%Y%m%d-%H%M%S')"
          echo "Generated bucket name: $BUCKET_NAME"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "âœ… S3 bucket '$BUCKET_NAME' already exists."
          else
            echo "ðŸš€ Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            echo "âœ… S3 bucket '$BUCKET_NAME' has been created and versioning enabled."
          fi

      - name: Terraform Init
        run: |
          cd clouds/aws
          terraform init \
            -backend-config="bucket=pos-fiap-schepis" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          cd clouds/aws
          terraform plan -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -out=plan.tfplan

      - name: Terraform Apply
        run: |
          cd clouds/aws 
          terraform apply -auto-approve plan.tfplan

      - name: Prepare RDS to all databases and restore BD
        id: rds_endpoint
        env:
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier hackaton-database --query "DBInstances[0].Endpoint.Address" --output text)
          export RDS_ENDPOINT
      
          echo "Creating databases..."
          PGPASSWORD=$RDS_PASSWORD psql -h $RDS_ENDPOINT -U postgres -c "CREATE DATABASE hackaton;"
          PGPASSWORD=$RDS_PASSWORD psql -h $RDS_ENDPOINT -U postgres -c "CREATE DATABASE sonarqube;"
          PGPASSWORD=$RDS_PASSWORD psql -h $RDS_ENDPOINT -U postgres -c "CREATE DATABASE keycloak;"
      
          echo "Restoring Keycloak database..."
          PGPASSWORD=$RDS_PASSWORD psql -h $RDS_ENDPOINT -U postgres -d keycloak -f init-db/keycloak_dump.sql
